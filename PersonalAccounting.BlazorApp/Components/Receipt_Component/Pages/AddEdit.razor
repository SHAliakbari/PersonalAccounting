@page "/Receipts/Add/{id?}"
@rendermode InteractiveServer
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.StaticFiles
@using Microsoft.EntityFrameworkCore
@using PersonalAccounting.BlazorApp.Components.Account
@using System.Globalization
@using PersonalAccounting.BlazorApp.Components.Receipt_Component.Services
@using PersonalAccounting.Domain.Data
@using System.Security.Claims
@using PersonalAccounting.Domain.Services
@using PersonalAccounting.Domain.Services.OCR
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using System.Text.Json
@using System.Text

<PageTitle>@(isNew ? "New" : "Edit") Receipt</PageTitle>

@inject ReceiptService Service
@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IWebHostEnvironment Environment
@inject ILogger<AddEdit> logger;
@inject IJSRuntime _js;
@inject BlobService blobService
@inject FormRecognizerService formRecognizerService;

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor;
@inject IdentityUserAccessor UserAccessor

<script type="text/javascript">
    async function viewFileFromStream(fileName, contentStreamReference, mimeType) {
        window.URL = window.URL || window.webkitURL;

        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer], { type: mimeType });
        const url = window.URL.createObjectURL(blob);

        const anchorElement = document.createElement('a');
        document.body.appendChild(anchorElement);

        anchorElement.setAttribute("type", "hidden");
        anchorElement.href = url;
        anchorElement.target = "_blank";
        anchorElement.click();

        anchorElement.remove();
        window.URL.revokeObjectURL(url);
    };

    async function viewFileFromUrl(url) {
        window.URL = window.URL || window.webkitURL;

        const anchorElement = document.createElement('a');
        anchorElement.setAttribute("type", "hidden");
        anchorElement.href = url;
        anchorElement.target = "_blank";

        document.body.appendChild(anchorElement);
        anchorElement.click();
        anchorElement.remove();
    };
</script>
<style>
    .details .detail {
        border: 1px solid gray;
    }

    .grid {
        margin-top: 5px;
    }

        .grid .details {
            width: 100%;
        }

            .grid .details td, .grid .details th {
                border: 1px solid gray;
            }

            /* Stripe effect */
            .grid .details tbody tr {
                background-color: rgba(0,0,0,0.04);
            }

                .grid .details tbody tr:nth-child(even) {
                    background: rgba(255,255,255,0.4);
                }

                .grid .details tbody tr.selectedRow {
                    /* background-color: forestgreen; */
                }

    .detailSection {
        border: 1px solid gray;
        margin: 10px;
    }

</style>
@if (isNew)
{
    <h1>Add Receipt</h1>
}
else
{
    <h1>Edit/View Receipt</h1>
}

<div>
    <EditForm Model="master" OnValidSubmit="HandleSubmit" method="post" FormName="registerReceipt">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-sm-6">
                <div class="form-floating mb-3">
                    <InputDate disabled="@(!isAdmin)" @bind-Value="master.Date" class="form-control" aria-required="true" />
                    <label for="Date">Receipt Date</label>
                    <ValidationMessage For="() => master.Date" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText disabled="@(!isAdmin)" @bind-Value="master.MerchantName" class="form-control" aria-required="true" placeholder="Freshco, ..." />
                    <label for="MerchantName">MerchantName</label>
                    <ValidationMessage For="() => master.MerchantName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText disabled="@(!isAdmin)" @bind-Value="master.ShopName" class=" form-control" aria-required="true" placeholder="Shoppers, Freshco, ..." />
                    <label for="ShopName">ShopName</label>
                    <ValidationMessage For="() => master.ShopName" class="text-danger" />
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-floating mb-3">
                    <InputNumber disabled="@(!isAdmin)" @bind-Value="master.TotalAmount" @oninput="(ChangeEventArgs e) => { master.TotalAmount = string.IsNullOrWhiteSpace(e.Value.ToString()) ? 0 : decimal.Parse((e.Value.ToString())); }" class="form-control" aria-required="true" />
                    <label for="TotalAmount">TotalAmount</label>
                    <ValidationMessage For="() => master.TotalAmount" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText required disabled="@(!isAdmin)" @bind-Value="master.PaidByUserName" class=" form-control" @onblur="FillPayedByUserInformation" aria-required="true" placeholder="your_email@email.com" />
                    <label for="PayedByUserName">PaidByUserName</label>
                    <ValidationMessage For="() => master.PaidByUserName" class="text-danger" />
                </div>
                @if (isAdmin)
                {
                    <div class="form-floating mb-3">
                        <button type="button" class="btn btn-link text-primary" @onclick="@(() => OpenShareModalForAll())">Manage Shares For All</button>
                        <AddEditShares Users=@users ReceiptItem="@selectedDetail" IsForAll="true" OnSharesSaved="ShareModalForAllSave" @ref="shareModalAll" />
                    </div>
                }

            </div>
        </div>
        <ValidationSummary />
        <div class="form-group">
            <label>Receipt File:</label>
            @if (isAdmin)
            {
                <InputFile OnChange="LoadFiles" />
                @uploadStatus
            }
            @if (master.Thumbnail != null)
            {
                <img @ondblclick="() => OpenFile(master)" width="100" height="100" src="data:image;base64, @System.Convert.ToBase64String(master.Thumbnail)" />
            }
            @if (isReceiptImageUploaded)
            {
                <button disabled="@isProcessing" type="button" class="btn btn-warning btn-lg" @onclick="ShowConfirmationClearFormReprocess">Process receipt file</button>
            }
            @if (isProcessing)
            {
                <span>Processing</span>
            }
        </div>

        <hr />
        <h2>Details</h2>
        <div class="text-end">
            @if (isAdmin)
            {
                <button type="button" @onclick="NewDetail" class="btn btn-success btn-sm">
                    New Detail
                </button>
            }
        </div>
        <div class="grid">
            <table class="details">
                <thead>
                    <tr>
                        <td>#</td>
                        <td>Category</td>
                        <td>Description</td>
                        <td>Quantity</td>
                        <td>QuantityUnit</td>
                        <td>UnitPrice</td>
                        <td>TotalPrice</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detail in master.Items)
                    {
                        <tr class="@getRowClass(detail)">
                            @if (getRowClass(detail) == "selectedRow")
                            {
                                <td colspan="8">
                                    <AddEditRow detail="detail" IsNew="isDetailNew" OnItemSaved="HandleDetailSubmit"
                                                OnEditCancelled="CancelNewDetail"></AddEditRow>
                                </td>
                            }
                            else
                            {
                                <td></td>
                                <td>@detail.Category</td>
                                <td>@detail.Description</td>
                                <td>@detail.Quantity</td>
                                <td>@detail.QuantityUnit</td>
                                <td>@detail.UnitPrice</td>
                                <td>@detail.TotalPrice</td>
                                <td>
                                    @if (isAdmin)
                                    {
                                        <button type="button" class="btn btn-link text-danger" @onclick="() => DeleteDetail(detail)">Delete</button>
                                        <button type="button" class="btn btn-link text-warning" @onclick="() => EditDetail(detail)">Edit</button>
                                    }

                                    <button type="button" class="btn btn-link text-primary" @onclick="@(() => OpenShareModal(detail))">Manage Shares</button>
                                    <AddEditShares IsReadOnly=!isAdmin Users=@users ReceiptItem="@selectedDetail" @ref="shareModal" />
                                    <div>
                                        <small>@GetShareContent(detail)</small>
                                    </div>
                                </td>
                            }
                        </tr>

                    }
                </tbody>
            </table>
            @if (isDetailNew && detail != null)
            {
                <AddEditRow detail="detail" IsNew="isDetailNew" OnItemSaved="HandleDetailSubmit"
                            OnEditCancelled="CancelNewDetail"></AddEditRow>
            }
        </div>

        @{


        }
        <hr />
        <div class="text-end">
            @if (isAdmin)
            {
                <button type="submit" class="btn btn-primary btn-lg">Save Receipt</button>
            }
        </div>

    </EditForm>

    @if (showConfirmationClearFormReprocess)
    {
        <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);" id="exampleModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Action</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CancelConfirmationClearFormReprocess">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to perform this action?
                        Will ereas the form content !
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CancelConfirmationClearFormReprocess">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="ConfirmActionClearFormReprocess">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Receipt master { get; set; } = default!; // Initialize with default value
    private ReceiptItem? detail = null;
    private ReceiptItem? selectedDetail = null;
    private bool isDetailNew = true;
    private List<ApplicationUser> users;
    private bool showConfirmationClearFormReprocess = false;

    private AddEditShares shareModal;
    private AddEditShares shareModalAll;

    private bool isProcessing = false;

    private bool isReceiptImageUploaded = false;

    private string PaidUserClassName = string.Empty;

    List<UserSymbol> usersSymbol = new List<UserSymbol>();

    private bool isNew { get; set; }

    string uploadStatus { get; set; } = string.Empty;

    [Parameter]
    public string id { get; set; }

    ApplicationUser user;
    string name;
    bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext);
        name = user.UserName;
        isAdmin = await UserManager.IsInRoleAsync(user, "admin");

        // if (isAdmin)
        {
            users = await UserManager.Users.ToListAsync();
        }

        isNew = string.IsNullOrEmpty(this.id);
        if (isNew)
        {
            master = new Receipt(); // Create new instance
        }
        else
        {
            await LoadMaster(int.Parse(id));
        }
    }

    private void OpenShareModalForAll()
    {
        this.selectedDetail = new ReceiptItem();
        shareModalAll.OpenModal();
    }

    private async Task ShareModalForAllSave()
    {
        if (this.selectedDetail == null)
        {
            return;
        }
        foreach (var row in master.Items)
        {
            row.Shares.Clear();
            foreach (var share in this.selectedDetail.Shares)
            {
                row.Shares.Add(new ReceiptItemShare
                    {
                        ReceiptItem = row,
                        Share = share.Share,
                        UserName = share.UserName,
                        UserFullName = share.UserFullName,
                        UserId = share.UserId
                    });
            }
        }
    }

    private void OpenShareModal(ReceiptItem detail)
    {
        this.selectedDetail = detail;
        shareModal.OpenModal();
    }

    private string getRowClass(ReceiptItem detail)
    {
        if (this.detail?.Id == detail.Id && this.detail?.Description == detail.Description)
        {
            return "selectedRow";
        }
        return "";
    }

    private void FillPayedByUserInformation(FocusEventArgs e)
    {
        if (master.PaidByUserId != null)
        {
            var user = users.FirstOrDefault(x => x.Email == master.PaidByUserName);
            if (user != null)
            {
                master.PaidByUserFullName = user.FullName;
                master.PaidByUserId = user.Id;
                PaidUserClassName = "border border-success";
                return;
            }
        }
        PaidUserClassName = "border border-danger";
        master.PaidByUserFullName = string.Empty;
        master.PaidByUserId = string.Empty;
    }

    private async Task OpenFile(Receipt receipt)
    {
        var content = await blobService.Download(receipt.ImageFileName);

        MemoryStream stream = new MemoryStream(content);
        stream.Position = 0;
        using var streamRef = new DotNetStreamReference(stream);
        await _js.InvokeVoidAsync("viewFileFromStream", receipt.ImageFileName, streamRef, GetMimeTypeForFileExtension(receipt.ImageFileName));
    }

    private void ShowConfirmationClearFormReprocess()
    {
        showConfirmationClearFormReprocess = true;
    }

    private void CancelConfirmationClearFormReprocess()
    {
        showConfirmationClearFormReprocess = false;
    }

    private async Task ConfirmActionClearFormReprocess()
    {
        showConfirmationClearFormReprocess = false;
        await preProcessImageFile();
    }

    private async Task preProcessImageFile()
    {
        if (master.ImageFileName == null)
            return;

        uploadStatus = "Processing";
        isProcessing = true;

        var file = await blobService.Download(master.ImageFileName);

        using (var stream = new MemoryStream(file))
        {
            await formRecognizerService.ExtractReceiptInfo(stream, master);
            Service.FillEmptyCategories(master);
            uploadStatus = "Processed . Check the form info";
            isProcessing = false;
            isReceiptImageUploaded = false;
        }
    }

    public string GetMimeTypeForFileExtension(string filePath)
    {
        const string DefaultContentType = "application/octet-stream";

        var provider = new FileExtensionContentTypeProvider();

        if (!provider.TryGetContentType(filePath, out string contentType))
        {
            contentType = DefaultContentType;
        }

        return contentType;
    }

    private void CancelNewDetail()
    {
        detail = null;
        isDetailNew = false;
    }

    private void NewDetail()
    {
        detail = new ReceiptItem();
        isDetailNew = true;
    }

    private void DeleteDetail(ReceiptItem detail)
    {


        if (!master.Items.Remove(detail))
        {
            logger.LogError("Could not remove detail {details}", JsonSerializer.Serialize(detail));
            return;
        }
        CancelNewDetail();
    }

    private void EditDetail(ReceiptItem detail)
    {
        this.detail = detail;
        isDetailNew = false;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            long maxFileSize = 1024L * 1024L * 1024L * 2L;
            var file = e.File;
            // if (files.Count > 0)
            {
                uploadStatus = "uploading";
                master.Thumbnail = null;
                master.ImageFileName = "";
                // foreach (var file in files)
                // {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);

                byte[]? thumbnail = null;
                var fileType = Path.GetExtension(file.Name);
                if (fileType.EndsWith("jpg")
                || fileType.EndsWith("jpeg")
                || fileType.EndsWith("png"))
                {
                    thumbnail = GetReducedImage(256, 256, memoryStream);
                    // if (thumbnail != null)
                    //     thumbnail.Save(thumbnailStream, System.Drawing.Imaging.ImageFormat.Png);
                }
                var readyToUpload = GetBlackWhiteImage(memoryStream);

                if (readyToUpload.Length > (4 * 1024 * 1024)) // > 4MB
                {
                    uploadStatus = $"File is too large - Max(4MB) - Now({readyToUpload.Length})";
                    return;
                }

                var fileName = await blobService.Upload(file.Name, readyToUpload);

                master.Thumbnail = thumbnail;
                master.ImageFileName = fileName;
                isReceiptImageUploaded = true;
                // }

                uploadStatus = "File is ready to Save";
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Upload Method");
            throw;
        }
    }

    private byte[] GetBlackWhiteImage(Stream resourceImage)
    {
        try
        {
            resourceImage.Seek(0, SeekOrigin.Begin);
            using MemoryStream memoryStream = new MemoryStream();
            using (Image image = Image.Load(resourceImage))
            {
                image.Mutate(x => x
                    .Grayscale()
                    .BinaryThreshold(0.5f));
                image.Save(memoryStream, SixLabors.ImageSharp.Formats.Png.PngFormat.Instance); // Automatic encoder selected based on extension.
            }

            return memoryStream.ToArray();
        }
        catch (Exception e)
        {
            logger.LogError(e, "GetReducedImage");
            throw;
        }
    }

    private byte[]? GetReducedImage(int width, int height, Stream resourceImage)
    {
        try
        {
            resourceImage.Seek(0, SeekOrigin.Begin);
            using MemoryStream memoryStream = new MemoryStream();
            using (Image image = Image.Load(resourceImage))
            {
                image.Mutate(x => x
                     .Resize(width, height)
                     .Grayscale());
                image.Save(memoryStream, SixLabors.ImageSharp.Formats.Png.PngFormat.Instance); // Automatic encoder selected based on extension.
            }

            return memoryStream.ToArray();
        }
        catch (Exception e)
        {
            logger.LogError(e, "GetReducedImage");
            return null;
        }
    }

    private async Task LoadMaster(int id)
    {
        master = await Service.GetReceiptById(id);
        isReceiptImageUploaded = false;

        master.Items.SelectMany(x => x.Shares.Select(x => x.UserName)).Distinct()
       .ToList().ForEach(x =>
       {
           if (!usersSymbol.Any(userSymbol => userSymbol.UserName == x))
           {
               usersSymbol.Add(new UserSymbol { UserName = x, Symbol = x.Substring(0, 2).ToUpper(), Style = UserSymbol.Styles[usersSymbol.Count] });
           }
       });
    }

    private MarkupString GetShareContent(ReceiptItem item)
    {
        StringBuilder builder1 = new StringBuilder();

        foreach (var share in item.Shares)
        {
            var userSymbol = usersSymbol.First(x => x.UserName == share.UserName);

            builder1.AppendLine($"<span class=\"badge {userSymbol.Style}\" title=\"{share.UserName}\">{(share.Share * item.TotalPrice / 100).ToString("##,##.##")}</span>");
        }

        return new MarkupString(builder1.ToString());
    }

    public async Task HandleSubmit(EditContext editContext)
    {
        if (master.Id == 0) // New master
        {
            await Service.AddReceipt(master);
        }
        else // Existing master
        {
            await Service.UpdateReceipt(master);
        }
        Navigation.NavigateTo("/Receipts/List");
    }

    private async Task HandleDetailSubmit()
    {
        if (detail.Id == 0)
        {
            master.Items.Add(detail);
            CancelNewDetail();
        }
    }
}
