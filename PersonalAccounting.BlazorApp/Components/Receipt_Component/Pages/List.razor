@page "/Receipts/List"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PersonalAccounting.BlazorApp.Components.Account
@using PersonalAccounting.BlazorApp.Components.Receipt_Component.Services
@using PersonalAccounting.Domain.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json
@using System.Globalization
@using System.Text
@rendermode InteractiveServer

@attribute [Authorize]
@attribute [StreamRendering]

@inject PersonalAccounting.BlazorApp.Components.Receipt_Component.Services.ReceiptService Service
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor;
@inject ILogger<List> logger;
@inject IdentityUserAccessor UserAccessor

<PageTitle>Receipts List</PageTitle>
<div>
    <h3>
        Receipts List
    </h3>
    <div>
        <InputText type="text" @bind-Value="SearchTerm" />
        <button type="button btn-sm" @onclick="HandleSearchButton">Filter</button>
    </div>
</div>

<style>
    .grid {
        margin-top: 5px;
    }

        .grid .receiptsList {
            width: 100%;
        }

            .grid .receiptsList td, .grid .receiptsList th {
                border: 1px solid gray;
            }

            /* Stripe effect */
            .grid .receiptsList tbody tr {
                background-color: rgba(0,0,0,0.04);
            }

                .grid .receiptsList tbody tr:nth-child(even) {
                    background: rgba(255,255,255,0.4);
                }

</style>

@if (isAdmin)
{
    <div class="text-end">
        <a href="/Receipts/Add" class="btn btn-primary">Add New</a>
    </div>
}
<br />
@if (isLoading == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div>
            @foreach (var item in usersSymbol)
            {
                <span class=@($"badge {item.Style}")>@item.UserName</span>
            }
        </div>
        <div class="grid" tabindex="-1">

            <QuickGrid TGridItem="Receipt" Items="@requests" Class="receiptsList">
                <TemplateColumn Title="Receipt Date">
                    <div>
                        <div>@context.Date.ToString("dd/MM/yyyy") @context.Time.ToString()</div>
                    </div>
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.ShopName)" Sortable="true" Title="ShopName" />
                <PropertyColumn Property="@(c => c.MerchantName)" Sortable="true" Title="MerchantName" />
                <PropertyColumn Property="@(c => c.TotalAmount)" Sortable="true" Title="TotalAmount" />
                <PropertyColumn Property="@(c => c.PaidByUserFullName)" Sortable="true" Title="PayedByUserFullName" />
                <TemplateColumn Title="Actions">
                    <div class="@GetRowClass(context)">
                        <div>
                            <button class="btn btn-sm btn-success" @onclick="@(() => NavigateToDetails(context.Id))">Details</button>
                            @if (isAdmin)
                            {
                                <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteReceipt(context.Id))">Delete</button>
                            }
                        </div>
                        <div>
                            <small>@GetShareContent(context)</small>
                        </div>
                    </div>
                </TemplateColumn>
            </QuickGrid>

            @if (showConfirmation)
            {
                <div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.8);" id="exampleModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirm Action</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CancelConfirmation">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to perform this action?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CancelConfirmation">Cancel</button>
                                <button type="button" class="btn btn-primary" @onclick="ConfirmAction">Confirm</button>
                            </div>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
}

@code {
    string SearchTerm = "";

    private bool isLoading = false;
    IQueryable<Receipt>? requests;
    private bool showConfirmation = false;
    private int selectedId;

    List<UserSymbol> usersSymbol = new List<UserSymbol>();

    bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        requests = await getList();
        InitList();
    }

    private string FormatCurrecny(decimal amount, string currency)
    {
        if (amount > 1000000)
        {
            amount /= 1000000;
            currency = "M-" + currency;
            return $"{amount.ToString("##,##.##")} {currency}";
        }
        return $"{amount.ToString("##,##")} {currency}";
    }

    async Task HandleSearchButton()
    {
        requests = await getList();
        requests = requests.Where(x =>
            x.MerchantName.Contains(SearchTerm) ||
            x.ShopName.Contains(SearchTerm) ||
            x.PaidByUserFullName.Contains(SearchTerm) ||
            x.Date.ToString().Contains(SearchTerm)
        );
        InitList();
    }

    private void InitList()
    {
        // Define the GridItemsProvider. Its job is to convert QuickGrid's GridItemsProviderRequest into a query against
        // an arbitrary data soure. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.



    }

    async Task<IQueryable<Receipt>> getList()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContextAccessor.HttpContext!);
        isAdmin = await UserManager.IsInRoleAsync(user, "admin");

        var res = await Service.GetAllReceipts(isAdmin ? "" : user.UserName);

        res.SelectMany(x => x.Items.SelectMany(x => x.Shares.Select(x => x.UserName))).Distinct()
        .ToList().ForEach(x =>
        {
            if (!usersSymbol.Any(userSymbol => userSymbol.UserName == x))
            {
                usersSymbol.Add(new UserSymbol { UserName = x, Symbol = x.Substring(0, 2).ToUpper(), Style = UserSymbol.Styles[usersSymbol.Count] });
            }
        });


        return res.AsQueryable();
    }

    private MarkupString GetShareContent(Receipt item)
    {
        StringBuilder builder1 = new StringBuilder();

        foreach (var share in item.UserShares)
        {
            var userSymbol = usersSymbol.First(x => x.UserName == share.Key);

            builder1.AppendLine($"<span class=\"badge {userSymbol.Style}\" title=\"{share.Key}\">{share.Value.ToString("##,##.##")}</span>");
        }

        return new MarkupString(builder1.ToString());
    }

    private string GetRowClass(Receipt item)
    {


        return item.Id == selectedId ? "selected" : "";
    }

    private void DeleteReceipt(int id)
    {
        selectedId = id;
        showConfirmation = true;
    }

    private void CancelConfirmation()
    {
        showConfirmation = false;
        selectedId = 0;
    }

    private async Task ConfirmAction()
    {
        await Service.DeleteReceipt(selectedId);
        requests = await getList();
        InitList();
        CancelConfirmation();
    }

    private void NavigateToDetails(int id)
    {
        // Use navigation manager to redirect to details page
        NavigationManager.NavigateTo($"/Receipts/Add/{id}");
    }

    private void NavigateToAdd()
    {
        // Use navigation manager to redirect to details page
        NavigationManager.NavigateTo($"/Receipts/Add");
    }
}
