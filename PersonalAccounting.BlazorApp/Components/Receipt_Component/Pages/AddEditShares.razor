@using System.Collections.Generic;
@using System.Linq;
@using PersonalAccounting.Domain.Data

@if (ReceiptItem != null)
{
    <div class="modal @(ShowModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Manage Shares for @ReceiptItem.Description</h5>
                    <button type="button" class="close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @foreach (var share in ReceiptItem.Shares)
                    {
                        <div class="row">
                            <div class="form-group col-sm-7">
                                <label for="Category">UserName:</label>
                                <InputSelect disabled="@(IsReadOnly)" @onblur="() => UserNameChanged(share)" @bind-Value="share.UserName" class="form-control" aria-required="true" placeholder="">
                                    @foreach (var user in ActiveUsers)
                                    {
                                        <option value=@user.UserName>@user.UserName - @user.FullName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="() => share.UserName" class="text-danger" />
                            </div>
                            <div class="form-group col-sm-3">
                                <label for="Category">Share (%):</label>
                                <InputNumber disabled="@(IsReadOnly)" class="form-control" @bind-Value="share.Share" />
                                <ValidationMessage For="() => share.Share" class="text-danger" />
                            </div>
                            @if (!IsReadOnly)
                            {
                                <div class="form-group col-sm-2">
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => RemoveShare(share))">-</button>
                                </div>
                            }
                        </div>
                    }
                    @if (!IsReadOnly)
                    {
                        <button type="button" class="btn btn-primary btn-sm" @onclick="AddShare">Add Share</button>
                    }
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    @if (IsForAll)
                    {
                        <button type="button" class="btn btn-primary" @onclick="SaveShares">SaveShares</button>
                    }
                    <div>
                        @Error
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<ApplicationUser> ActiveUsers => this.Users.Where(x => x.EmailConfirmed).ToList();

    [Parameter]
    public ReceiptItem ReceiptItem { get; set; }

    [Parameter]
    public List<ApplicationUser> Users { get; set; }

    [Parameter]
    public EventCallback OnSharesSaved { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public bool IsForAll { get; set; } = false;

    private string Error = "";

    public bool ShowModal { get; set; }

    public void OpenModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
    }

    private void AddShare()
    {
        ReceiptItem.Shares.Add(new ReceiptItemShare());
    }

    private void RemoveShare(ReceiptItemShare shareToRemove)
    {
        ReceiptItem.Shares.Remove(shareToRemove);
    }

    private void UserNameChanged(ReceiptItemShare share)
    {
        if (share.UserName != null)
        {
            var selectedUser = Users.FirstOrDefault(x => x.UserName == share.UserName);
            if (selectedUser != null)
            {
                share.UserFullName = selectedUser.FullName;
                share.UserId = selectedUser.Id;
            }
        }
    }

    private async Task SaveShares()
    {
        Error = "";
        //Validate total share
        if (ReceiptItem.Shares.Sum(s => s.Share) != 100)
        {
            //Show error message or handle validation in a proper way
            Error = "Total share must be 100%";
            return;
        }
        await OnSharesSaved.InvokeAsync();
        CloseModal();
    }
}